module.exports=function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=5)}([function(e,t,n){var r=n(7)();e.exports=r;try{regeneratorRuntime=r}catch(e){"object"==typeof globalThis?globalThis.regeneratorRuntime=r:Function("r","regeneratorRuntime = r")(r)}},function(e,t){function n(e,t,n,r,o,i,a){try{var s=e[i](a),c=s.value}catch(e){return void n(e)}s.done?t(c):Promise.resolve(c).then(r,o)}e.exports=function(e){return function(){var t=this,r=arguments;return new Promise((function(o,i){var a=e.apply(t,r);function s(e){n(a,o,i,s,c,"next",e)}function c(e){n(a,o,i,s,c,"throw",e)}s(void 0)}))}},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t){e.exports=require("electron")},function(e,t){e.exports=require("path")},function(e,t){e.exports=require("fs")},function(e,t,n){var r=n(2),o=r.app,i=r.BrowserWindow,a=(r.Notification,r.ipcMain),s=r.Tray,c=r.Menu,u=(r.screen,r.globalShortcut,r.ipcRenderer,r.contextBridge,n(3)),l=n(4);global.osim={};var f,h=u.dirname(o.getPath("exe")),p=u.join(h,"/resources/app.asar/logo1.ico"),m=u.join(h,"/resources/app.asar/preload.js"),d=u.join(h,"/resources/config.json");l.readFileSync(d,"utf8");osim.confjson={ws:"wss://app.yixinu.com",http:"https://app.yixinu.com/osim"},o.on("ready",(function(){if(n(6),mainWindow=new i({title:"OSIM聊天软件",width:1280,height:750,icon:p,fullscreen:!1,frame:!1,webPreferences:{nodeIntegration:!0,contextIsolation:!1,zoomFactor:1,preload:m}}),mainWindow.loadFile("./index.html"),mainWindow.menuBarVisible=!1,mainWindow.on("close",(function(e){})),"win32"==process.platform){f=new s(p);var e=c.buildFromTemplate([{label:"打开主页",click:function(){mainWindow.show()}},{label:"退出",click:function(){o.quit()}}]);f.setToolTip("OSIM聊天软件"),f.setContextMenu(e),f.on("click",(function(){mainWindow.show()}))}a.on("openDevtools",(function(e,t){mainWindow.webContents.isDevToolsOpened()?mainWindow.webContents.closeDevTools():mainWindow.webContents.openDevTools()}))}))},function(e,t,n){"use strict";n.r(t);var r=n(1),o=n.n(r),i=n(0),a=n.n(i),s=n(2),c=s.app,u=s.BrowserWindow,l=s.Notification,f=s.ipcMain,h=s.screen,p=s.dialog,m=s.globalShortcut,d=s.desktopCapturer,v=s.nativeImage,g=n(3),y=n(4),w=n(9),b=n(10);osim.log=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:null,i=b.createSocket("udp4");r=r||"127.0.0.1",o=o||9460;var a=new Date,s=a.getFullYear(),c=a.getMonth()+1,u=a.getDate(),l=a.getHours(),f=a.getMinutes(),h=a.getSeconds(),p=s+"-"+c+"-"+u+" "+l+":"+f+":"+h,m="======== [".concat(p," ======== ").concat(n,"]\n").concat(t);i.send(m,o,r,(function(e,t){i.close()}))};var x=g.dirname(c.getPath("exe")),_=g.join(x,"/resources/app.asar/logo1.ico"),S=g.join(x,"/resources/app.asar/preload.js"),j=g.join(x,"/resources/libosim.dll");osim.lib=w.Library(j,{_open:["int",["string"]],_close1:["int",["string"]],_createtable:["int",[]],_select:["string",["string"]],_execute:["int",["string"]],_count:["int",["string"]],_findone:["string",["string"]]}),osim.openFile=function(){var e=o()(a.a.mark((function e(t,n){var r,o,i,s;return a.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=n||{title:"Open file"},e.next=3,p.showOpenDialog(mainWindow,r);case 3:if(o=e.sent,i=o.canceled,s=o.filePaths,!i){e.next=10;break}return e.abrupt("return");case 10:return e.abrupt("return",s[0]);case 11:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}(),osim.selectFile=function(){var e=o()(a.a.mark((function e(t,n){var r,o,i,s,c;return a.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=null,1==n?r={title:"Open file",filters:[{name:"All Files",extensions:["*"]}]}:2==n&&(r={title:"Select image.",filters:[{name:"Images",extensions:["jpg","png","gif"]}]}),e.next=4,p.showOpenDialog(mainWindow,r);case 4:if(o=e.sent,i=o.canceled,s=o.filePaths,!i){e.next=11;break}return e.abrupt("return");case 11:if(2!=n){e.next=16;break}return c=v.createFromPath(s[0]),e.abrupt("return",c.toDataURL());case 16:return e.abrupt("return",s[0]);case 17:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}(),osim.openScreenshot=function(){var e=o()(a.a.mark((function e(t,n){var r,o,i;return a.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:r=h.getPrimaryDisplay().bounds,o=r.width,i=r.height,global.screenshotWin=new u({title:"屏幕截图",icon:_,fullscreen:"win32"==process.platform||void 0,width:o,height:i,transparent:!0,frame:!1,skipTaskbar:!0,resizable:!1,movable:!1,minimizable:!1,maximizable:!1,alwaysOnTop:!0,enableLargerThanScreen:!0,hasShadow:!1,webPreferences:{nodeIntegration:!0,contextIsolation:!1,preload:S}}),screenshotWin.setSkipTaskbar(!0),screenshotWin.loadFile("./index.html",{hash:"screenshot"}),screenshotWin.menuBarVisible=!1,m.register("Esc",(function(){screenshotWin&&(screenshotWin.close(),screenshotWin=null,m.unregister("Esc"))})),screenshotWin.on("read-to-show",(function(){})),screenshotWin.hide();case 8:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}(),osim.getimgScreenshot=function(){var e=o()(a.a.mark((function e(t,n){var r,o,i,s,c,u;return a.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=h.getPrimaryDisplay(),o=r.bounds,i=o.width,s=o.height,c=r.scaleFactor,e.next=3,d.getSources({types:["screen"],thumbnailSize:{width:i*c,height:s*c}}).then((function(e){return e[0].thumbnail.toDataURL()}));case 3:return u=e.sent,screenshotWin.show(),e.abrupt("return",u);case 6:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}(),osim.closeScreenshot=function(e,t){return!!screenshotWin&&(screenshotWin.close(),screenshotWin=null,m.unregister("Esc"),!0)},osim.notify=function(){var e=o()(a.a.mark((function e(t,n,r){return a.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:new l({title:n,body:r}).show();case 1:case"end":return e.stop()}}),e)})));return function(t,n,r){return e.apply(this,arguments)}}(),osim.quit=function(e){c.quit()},osim.closewin=function(e){mainWindow.hide()},osim.maxwin=function(e){mainWindow.isMaximized()?mainWindow.unmaximize():mainWindow.maximize()},osim.minwin=function(e){mainWindow.minimize()},osim.getUserDir=function(){var e=o()(a.a.mark((function e(t,n){var r,o;return a.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(n){e.next=2;break}return e.abrupt("return",!1);case 2:return r="".concat(x,"/data/"),0==y.existsSync(r)&&y.mkdirSync(r),o="".concat(r,"/").concat(n,"/"),0==y.existsSync(o)&&y.mkdirSync(o),e.abrupt("return",o);case 7:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}(),osim.opendb=function(){var e=o()(a.a.mark((function e(t,n){var r,o;return a.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:r=osim.getUserDir(n),o=r+"/osim.db",osim.lib._open(o);case 3:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}(),osim.closedb=function(){var e=o()(a.a.mark((function e(t){var n,r;return a.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:n=osim.getUserDir(uid),r=n+"/osim.db",osim.lib._close1(r);case 3:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),osim.sqlexec=function(){var e=o()(a.a.mark((function e(t,n){var r;return a.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=osim.lib._execute(n),e.abrupt("return",r);case 2:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}(),osim.sqlall=function(e,t){return osim.lib._select(t)},osim.sqlget=function(e,t){return osim.lib._findone(t)},osim.cache={},osim.cache_set=function(e,t,n){osim.cache[t]=n},osim.cache_get=function(e,t){return osim.cache[t]},osim.cache_del=function(e,t){osim.cache[t]=void 0},osim.conf=function(e){return osim.confjson},f.handle("osim.openFile",osim.openFile),f.handle("osim.selectFile",osim.selectFile),f.handle("osim.openScreenshot",osim.openScreenshot),f.handle("osim.getimgScreenshot",osim.getimgScreenshot),f.handle("osim.closeScreenshot",osim.closeScreenshot),f.handle("osim.notify",osim.notify),f.handle("osim.quit",osim.quit),f.handle("osim.closewin",osim.closewin),f.handle("osim.minwin",osim.minwin),f.handle("osim.maxwin",osim.maxwin),f.handle("osim.getUserDir",osim.getUserDir),f.handle("osim.opendb",osim.opendb),f.handle("osim.closedb",osim.closedb),f.handle("osim.sqlexec",osim.sqlexec),f.handle("osim.sqlall",osim.sqlall),f.handle("osim.sqlget",osim.sqlget),f.handle("osim.cache_set",osim.cache_set),f.handle("osim.cache_get",osim.cache_get),f.handle("osim.cache_del",osim.cache_del),f.handle("osim.conf",osim.conf),f.handle("osim.log",osim.log),m.register("CommandOrControl+Alt+X",osim.openScreenshot)},function(e,t,n){var r=n(8).default;function o(){"use strict";/*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */e.exports=o=function(){return t},e.exports.__esModule=!0,e.exports.default=e.exports;var t={},n=Object.prototype,i=n.hasOwnProperty,a=Object.defineProperty||function(e,t,n){e[t]=n.value},s="function"==typeof Symbol?Symbol:{},c=s.iterator||"@@iterator",u=s.asyncIterator||"@@asyncIterator",l=s.toStringTag||"@@toStringTag";function f(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{f({},"")}catch(e){f=function(e,t,n){return e[t]=n}}function h(e,t,n,r){var o=t&&t.prototype instanceof d?t:d,i=Object.create(o.prototype),s=new O(r||[]);return a(i,"_invoke",{value:j(e,n,s)}),i}function p(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=h;var m={};function d(){}function v(){}function g(){}var y={};f(y,c,(function(){return this}));var w=Object.getPrototypeOf,b=w&&w(w(E([])));b&&b!==n&&i.call(b,c)&&(y=b);var x=g.prototype=d.prototype=Object.create(y);function _(e){["next","throw","return"].forEach((function(t){f(e,t,(function(e){return this._invoke(t,e)}))}))}function S(e,t){var n;a(this,"_invoke",{value:function(o,a){function s(){return new t((function(n,s){!function n(o,a,s,c){var u=p(e[o],e,a);if("throw"!==u.type){var l=u.arg,f=l.value;return f&&"object"==r(f)&&i.call(f,"__await")?t.resolve(f.__await).then((function(e){n("next",e,s,c)}),(function(e){n("throw",e,s,c)})):t.resolve(f).then((function(e){l.value=e,s(l)}),(function(e){return n("throw",e,s,c)}))}c(u.arg)}(o,a,n,s)}))}return n=n?n.then(s,s):s()}})}function j(e,t,n){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return P()}for(n.method=o,n.arg=i;;){var a=n.delegate;if(a){var s=k(a,n);if(s){if(s===m)continue;return s}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var c=p(e,t,n);if("normal"===c.type){if(r=n.done?"completed":"suspendedYield",c.arg===m)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(r="completed",n.method="throw",n.arg=c.arg)}}}function k(e,t){var n=t.method,r=e.iterator[n];if(void 0===r)return t.delegate=null,"throw"===n&&e.iterator.return&&(t.method="return",t.arg=void 0,k(e,t),"throw"===t.method)||"return"!==n&&(t.method="throw",t.arg=new TypeError("The iterator does not provide a '"+n+"' method")),m;var o=p(r,e.iterator,t.arg);if("throw"===o.type)return t.method="throw",t.arg=o.arg,t.delegate=null,m;var i=o.arg;return i?i.done?(t[e.resultName]=i.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,m):i:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,m)}function L(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function W(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function O(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(L,this),this.reset(!0)}function E(e){if(e){var t=e[c];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var n=-1,r=function t(){for(;++n<e.length;)if(i.call(e,n))return t.value=e[n],t.done=!1,t;return t.value=void 0,t.done=!0,t};return r.next=r}}return{next:P}}function P(){return{value:void 0,done:!0}}return v.prototype=g,a(x,"constructor",{value:g,configurable:!0}),a(g,"constructor",{value:v,configurable:!0}),v.displayName=f(g,l,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===v||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,g):(e.__proto__=g,f(e,l,"GeneratorFunction")),e.prototype=Object.create(x),e},t.awrap=function(e){return{__await:e}},_(S.prototype),f(S.prototype,u,(function(){return this})),t.AsyncIterator=S,t.async=function(e,n,r,o,i){void 0===i&&(i=Promise);var a=new S(h(e,n,r,o),i);return t.isGeneratorFunction(n)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},_(x),f(x,l,"Generator"),f(x,c,(function(){return this})),f(x,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=E,O.prototype={constructor:O,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(W),!e)for(var t in this)"t"===t.charAt(0)&&i.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function n(n,r){return a.type="throw",a.arg=e,t.next=n,r&&(t.method="next",t.arg=void 0),!!r}for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r],a=o.completion;if("root"===o.tryLoc)return n("end");if(o.tryLoc<=this.prev){var s=i.call(o,"catchLoc"),c=i.call(o,"finallyLoc");if(s&&c){if(this.prev<o.catchLoc)return n(o.catchLoc,!0);if(this.prev<o.finallyLoc)return n(o.finallyLoc)}else if(s){if(this.prev<o.catchLoc)return n(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return n(o.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.tryLoc<=this.prev&&i.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var o=r;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var a=o?o.completion:{};return a.type=e,a.arg=t,o?(this.method="next",this.next=o.finallyLoc,m):this.complete(a)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),m},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),W(n),m}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;W(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:E(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=void 0),m}},t}e.exports=o,e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t){function n(t){return e.exports=n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e.exports.__esModule=!0,e.exports.default=e.exports,n(t)}e.exports=n,e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t){e.exports=require("ffi-napi")},function(e,t){e.exports=require("dgram")}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,